import subprocess
from termcolor import colored
import tkinter as tk
from tkinter import simpledialog
from tkinter import messagebox
from tkinter import PhotoImage

command_history = []

# Ajout d'une variable pour la destination
destination = "../"

def execute_command(command, success_message, error_message):
    try:
        subprocess.run(command, shell=True, check=True)
        print(colored(success_message, "green"))
    except subprocess.CalledProcessError as e:
        print(colored(f"Erreur: {e}", "red"))
        print(colored(error_message, "red"))

def git_options():
    file_to_commit = simpledialog.askstring("Git", "Nom du fichier à ajouter (ou '.' pour tout ajouter):")
    if file_to_commit:
        commit_message = simpledialog.askstring("Git", "Message de commit:")
        if commit_message:
            git_commands = [
                f"cd {destination}",  # Utilisation de la variable destination
                f"git add {file_to_commit}",
                f'git commit -m "{commit_message}"',
                "git push origin main"
            ]
            execute_command(' && '.join(git_commands), "Opérations Git terminées.", "Erreur lors de l'opération Git.")
            command_history.append(git_commands)

def npm_options():
    version_bump = simpledialog.askstring("Npm", "Bump de version (patch/minor/major):")
    if version_bump:
        npm_commands = [
            f"cd {destination}",  # Utilisation de la variable destination
            f"npm version {version_bump}",
            "npm publish"
        ]
        execute_command(" && ".join(npm_commands), "Opérations Npm terminées.", "Erreur lors de l'opération Npm.")
        command_history.append(npm_commands)

def show_command_history():
    if not command_history:
        messagebox.showinfo("Historique des commandes", "Aucune commande dans l'historique.")
    else:
        history_text = "\n".join([f"{index + 1}. {' && '.join(cmd)}" for index, cmd in enumerate(command_history)])
        messagebox.showinfo("Historique des commandes", history_text)

def undo_last_command():
    if not command_history:
        messagebox.showinfo("Annuler la dernière commande", "Aucune commande dans l'historique.")
    else:
        last_command = command_history.pop()
        execute_command(" && ".join(last_command), "Commande annulée.", "Erreur lors de l'annulation de la commande.")

def main():
    root = tk.Tk()
    root.title("Outils de gestion")
    
    # Configure la couleur de fond globale
    root.configure(bg="#f5f5f5")
    
    # Charge une icône pour les boutons
    icon = PhotoImage(file="icon.png")
    
    # Style des boutons
    button_style = {
        "font": ("Helvetica", 12),
        "relief": tk.RAISED,
        "bg": "#4CAF50",  # Couleur de fond verte
        "fg": "white",    # Texte en blanc
        "image": icon,
        "compound": tk.LEFT  # Icône à gauche du texte
    }
    
    git_button = tk.Button(root, text="Git : Ajouter, Commit et Push", command=git_options, **button_style)
    git_button.pack(pady=10)
    
    npm_button = tk.Button(root, text="Npm : Changer la version et Publier", command=npm_options, **button_style)
    npm_button.pack(pady=10)
    
    history_button = tk.Button(root, text="Historique des commandes", command=show_command_history, **button_style)
    history_button.pack(pady=10)
    
    undo_button = tk.Button(root, text="Revenir en arrière", command=undo_last_command, **button_style)
    undo_button.pack(pady=10)
    
    quit_button = tk.Button(root, text="Quitter", command=root.quit, **button_style)
    quit_button.pack(pady=10)
    
    root.mainloop()

if __name__ == "__main__":
    main()
